@page "/SampleData"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData
<h3>SampleData</h3>


@if (categoriesCreated)
{
    <h4>Categories have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}

@if (statusesCreated)
{
    <h4>Statuses have been created</h4>
}
else
{
    <button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>
}

<button class="btn btn-danger" @onclick="GenerateSampleData">Generate Sample Data</button>


@code {
    private bool categoriesCreated = false;
    private bool statusesCreated = false;

    private async Task GenerateSampleData()
    {
        UserModel user = new()
            {
                FirstName = "Ben",
                LastName = "Li",
                EmailAddress = "Ben.li@gamilc.om",
                DisplayName = "Sample Time Core",
                ObjectIdentifier = "abc-123"
            };
        await userData.CreateUser(user);

        var foundUser = await userData.GetUserFromAuthentication("abc-123");
        var categories = await categoryData.GetAllCategories();
        var statuses = await statusData.GetAllStatuses();

        HashSet<string> votes = new();
        votes.Add("1");
        votes.Add("2");
        votes.Add("3");

        SuggestionModel suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[0],
                Suggestion = "Our first suggestion",
                Description = "This is a sugestion create by the sample data"
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[1],
                Suggestion = "Our Second suggestion",
                Description = "This is a sugestion create by the sample data",
                SuggestionStatus = statuses[0],
                OwnerNotes = "This is the note for the status."
            };
        await suggestionData.CreateSuggestion(suggestion);


        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[2],
                Suggestion = "Our Third suggestion",
                Description = "This is a sugestion create by the sample data",
                SuggestionStatus = statuses[1],
                OwnerNotes = "This is the note for the status."
            };
        await suggestionData.CreateSuggestion(suggestion);

        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[3],
                Suggestion = "Our Fourth suggestion",
                Description = "This is a sugestion create by the sample data",
                SuggestionStatus = statuses[2],
                UserVotes = votes,
                OwnerNotes = "This is the note for the status."
            };
        await suggestionData.CreateSuggestion(suggestion);
        
        votes.Add("4");


        suggestion = new()
            {
                Author = new BasicUserModel(foundUser),
                Category = categories[4],
                Suggestion = "Our Fifth suggestion",
                Description = "This is a sugestion create by the sample data",
                SuggestionStatus = statuses[3],
                UserVotes = votes,
                OwnerNotes = "This is the note for the status."
            };
        await suggestionData.CreateSuggestion(suggestion);
    }

    private async Task CreateCategories()
    {
        var categories = await categoryData.GetAllCategories();

        // if not null contiue
        if (categories?.Count > 0)
        {
            return; // dont want add categories second time
        }

        CategoryModel cat = new()
        {
            CategoryName = "Courses",
            CategoryDescription = "Full paid courses."
        };
        await categoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "Dev Questions",
            CategoryDescription = "question for development."
        };
        await categoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "In-Depth Tutorial",
            CategoryDescription = "A deep dive into .net"
        };
        await categoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "10 - minute Tring",
            CategoryDescription = "Use ten miniuse to learn \"How do I use this?\" video."
        };
        await categoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "Other",
            CategoryDescription = "Not sure."
        };
        await categoryData.CreateCategory(cat);

        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await statusData.GetAllStatuses();

        if (statuses?.Count > 0) return;

        StatusModel stat = new()
            {
                StatusName = "Completed",
                StatusDescription = "The suggestion was accepted and the corresponding"
            };
        await statusData.CreaseStatus(stat);

        stat = new()
            {
                StatusName = "Watching",
                StatusDescription = "The suggestion was accepted and the corresponding"
            };
        await statusData.CreaseStatus(stat);

        stat = new()
            {
                StatusName = "Upcoming",
                StatusDescription = "The suggestion was accepted and the corresponding"
            };
        await statusData.CreaseStatus(stat);

        stat = new()
            {
                StatusName = "Reject",
                StatusDescription = "The suggestion was accepted and the corresponding"
            };
        await statusData.CreaseStatus(stat);
        statusesCreated = true;
    }
}
